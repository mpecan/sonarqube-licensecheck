//The artifacts produced are a self-contained jar (via the 'build' task) and/or a deb package (via the 'packDeb' task).
//The artifacts are named as follows:
// jar: the-service-name-<git-commit-id>/jar
//deb: the-service-name

buildscript {
  ext {
    springBootGradlePluginVersion = '1.5.2.RELEASE'
    springCloudVersion = 'Camden.SR6'
  }
  repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "https://repo.spring.io/libs-release-local" }
    maven { url "https://repo.spring.io/libs-milestone-local" }
    maven { url "https://repo.spring.io/libs-snapshot-local" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootGradlePluginVersion}")
    classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.16")
    classpath 'org.yaml:snakeyaml:1.17'
    classpath 'com.netflix.nebula:gradle-ospackage-plugin:3.1.0'
  }
}

plugins {
  id "org.asciidoctor.convert" version "1.5.3"
  id "org.sonarqube" version "2.7"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: "jacoco"
apply plugin: "com.gorylenko.gradle-git-properties"
apply plugin: 'pmd'
apply plugin: 'nebula.ospackage-base'

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  maven { url "https://repo.spring.io/snapshot" }
  maven { url "https://repo.spring.io/milestone" }
  maven { url "https://repo.spring.io/libs-release-local" }
  maven { url "https://repo.spring.io/libs-milestone-local" }
  maven { url "https://repo.spring.io/libs-snapshot-local" }
}


dependencies {
  compile('org.aspectj:aspectjweaver:1.8.9')
  compile('org.springframework.boot:spring-boot-starter-web')
  compile("org.springframework.boot:spring-boot-starter-actuator")
  compile("org.springframework.boot:spring-boot-starter-logging")
  compile('org.springframework.cloud:spring-cloud-starter-eureka')
  compile('org.springframework.boot:spring-boot-starter-data-rest')
  compile('org.springframework.boot:spring-boot-starter-data-jpa')
  compile('org.springframework.cloud:spring-cloud-config-client')
  compile('org.springframework.cloud:spring-cloud-starter-sleuth')    //log correlation
  compile('org.springframework.cloud:spring-cloud-starter-zipkin')  //log correlation
  compile("org.zalando:spring-cloud-config-aws-kms:1.4")
  compile('org.projectlombok:lombok:1.16.10')
  compile('org.codehaus.janino:janino:3.0.1')
  compile('io.dropwizard.metrics:metrics-core')
  compile('com.fasterxml.jackson.module:jackson-module-jsonSchema:2.8.0')
  compile('com.jayway.jsonpath:json-path:2.2.0')
  compile('org.apache.commons:commons-lang3:3.4')
  compile('joda-time:joda-time:2.9.4')
  compile("org.springframework.cloud:spring-cloud-starter-aws-messaging")
  compile("org.springframework.cloud:spring-cloud-aws-autoconfigure")
  compile("org.springframework.boot:spring-boot-configuration-processor")
  compile('org.flywaydb:flyway-core')
  compile('ru.vyukov:spring-boot-starter-prometheus:0.1')
  runtime('com.h2database:h2')
  compile('com.newrelic.agent.java:newrelic-api:3.33.0')
  testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile('org.openjdk.jmh:jmh-core:1.15')
  testCompile('org.openjdk.jmh:jmh-generator-annprocess:1.15')
  testCompile('com.carrotsearch:junit-benchmarks:0.7.2')
}

import org.yaml.snakeyaml.Yaml

ext {

  try {
    snippetsDir = file('build/generated-snippets')

    //make available git commitId
    git = org.ajoberstar.grgit.Grgit.open(file('.'))
    commitId = git.head().abbreviatedId //http://mrhaki.blogspot.de/2015/04/gradle-goodness-use-git-commit-id-in.html

    //make available service name
    File appFile = file('src/main/resources/bootstrap.yml')
    yml = new Yaml().loadAll(new FileInputStream(appFile))
    artifactId = yml.iterator().next().get('spring').get('application').get('name')
  } catch (Exception e) {
    logger.error("Could not run specific tasks for ext")
    artifactId = "unknown"
    commitId = "unknown"
  }
}

test {
  //http://stackoverflow.com/a/31328621/4985623
  systemProperties System.properties

  // https://issues.gradle.org/browse/GRADLE-2860
  systemProperties['user.dir'] = workingDir

  outputs.dir snippetsDir
  testLogging {
    events "passed", "skipped", "failed"
  }
}

//Don't fail on pmd warnings, only report
pmd {
  ignoreFailures = true
}

asciidoctor {
  attributes 'snippets': snippetsDir
  inputs.dir snippetsDir
  dependsOn test
}

jar {
  baseName = "${artifactId}"
  dependsOn asciidoctor
  from("${asciidoctor.outputDir}/html5") {
    into 'static/docs'
  }
}

bootRun {
  //http://stackoverflow.com/a/31328621/4985623
  systemProperties System.properties
  dependsOn asciidoctor
}

springBoot {
  mainClass = 'de.affinitas.Application'
  executable = true
}

jacoco {
  toolVersion = "0.7.6+"
}

// from: https://github.com/fowlie/gradle-jenkins-test/blob/master/plugin/src/main/groovy/com/github/fowlie/GradleJenkinsTestPlugin.groovy
task jenkinsQualityTest {
  def testResults = project.test.getReports().getJunitXml().getDestination()
  if (testResults.exists()) testResults.eachFile {
    it.lastModified = System.currentTimeMillis()
  }
}

//Proper git commit date in /info actuator. example taken from https://github.com/n0mer/gradle-git-properties
gitProperties {
  dateFormat = "yyyy-MM-dd'T'HH:mmZ"
  dateFormatTimeZone = "CET"
}


//Builds a debian package including OS dependencies and startup script.
task packDeb(type: Deb, dependsOn: [bootRepackage]) {
  packageName = "${artifactId}"
  version = "1"
  release "${commitId}"
  arch "amd64"

  doFirst {
    copy {
      from('pkg_scripts') {
        include '*'
        filter { it.replaceAll('@@projectName@@', "${artifactId}") }
      }
      into "${buildDir}"
    }
  }

  postInstall file('build/start-service.sh')

  from("${buildDir}/libs/${artifactId}.jar") {
    into '/opt/service'
    user = 'nobody'
    permissionGroup = 'nobody'
  }
  from("${buildDir}/javaapp.service") {
    into '/etc/systemd/system'
    user = 'nobody'
    permissionGroup = 'nobody'
  }
}
